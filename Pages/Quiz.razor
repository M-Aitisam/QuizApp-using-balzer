@page "/quiz"
@inject QuizService QuizService

@code {
    private List<Category>? categories;
    private int currentCategoryIndex = 0;
    private int currentQuestionIndex = 0;
    private int? selectedAnswerIndex = null;
    private List<int> scores = new List<int>();

    protected override async Task OnInitializedAsync()
    {
        categories = await QuizService.GetCategoriesAsync();
        InitializeScores();
    }

    private void InitializeScores()
    {
        if (categories != null)
        {
            foreach (var category in categories)
            {
                foreach (var question in category.Questions)
                {
                    scores.Add(0); // Initialize scores with 0 for each question
                }
            }
        }
    }

    private void SelectAnswer(int index, int points)
    {
        selectedAnswerIndex = index;
        int globalQuestionIndex = GetGlobalQuestionIndex(currentCategoryIndex, currentQuestionIndex);
        scores[globalQuestionIndex] = points;
    }

    private async Task NextQuestion()
    {
        if (selectedAnswerIndex.HasValue)
        {
            selectedAnswerIndex = null;

            if (currentQuestionIndex < categories[currentCategoryIndex].Questions.Count - 1)
            {
                currentQuestionIndex++;
            }
            else if (currentCategoryIndex < categories.Count - 1)
            {
                currentCategoryIndex++;
                currentQuestionIndex = 0;
            }
            else
            {
                // Handle end of quiz if needed
                return;
            }

            await QuizService.SaveResponsesAsync(scores);
        }
    }

    private void PreviousQuestion()
    {
        if (currentQuestionIndex > 0)
        {
            currentQuestionIndex--;
        }
        else if (currentCategoryIndex > 0)
        {
            currentCategoryIndex--;
            currentQuestionIndex = categories[currentCategoryIndex].Questions.Count - 1;
        }
    }

    private int GetGlobalQuestionIndex(int categoryIndex, int questionIndex)
    {
        int globalIndex = 0;
        for (int i = 0; i < categoryIndex; i++)
        {
            globalIndex += categories[i].Questions.Count;
        }
        return globalIndex + questionIndex;
    }
}

<div class="container">
    <div class="quiz-container">
        @if (categories != null)
        {
            <h3>@categories[currentCategoryIndex].CategoryName</h3>
            <p>@categories[currentCategoryIndex].Questions[currentQuestionIndex].QuestionText</p>

            <ul class="answers-list">
                @for (int i = 0; i < categories[currentCategoryIndex].Questions[currentQuestionIndex].Answers.Count; i++)
                {
                    var answer = categories[currentCategoryIndex].Questions[currentQuestionIndex].Answers[i];
                    <li>
                        <input type="radio" id="@($"answer-{i}")" name="answers" @onclick="() => SelectAnswer(i, answer.Points)" checked="@(selectedAnswerIndex == i)" />
                        <label for="@($"answer-{i}")">@answer.Text</label>
                    </li>
                }
            </ul>

            <div class="navigation-buttons">
                <button @onclick="PreviousQuestion" disabled="@(currentCategoryIndex == 0 && currentQuestionIndex == 0)">Previous</button>
                <button @onclick="NextQuestion">Next</button>
            </div>
        }
    </div>
</div>

<style>
    .answers-list {
        list-style-type: none;
        padding: 0;
    }

        .answers-list li {
            margin: 10px 0;
        }

    input[type="radio"] {
        display: none;
    }

        input[type="radio"] + label {
            position: relative;
            padding-left: 25px;
            cursor: pointer;
            user-select: none;
        }

            input[type="radio"] + label:before {
                content: "";
                position: absolute;
                left: 0;
                top: 0;
                width: 18px;
                height: 18px;
                border: 2px solid #000;
                border-radius: 50%;
                background: #fff;
            }

        input[type="radio"]:checked + label:after {
            content: "";
            position: absolute;
            left:1px;
             top: 5px; 
            width: 12px;
            height: 12px;
            border-radius: 50%;
            border: 2px solid black;
            /* background: yellow; */
        }
</style>
